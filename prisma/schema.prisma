// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User accounts for report purchasing
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  orders      Order[]
  reports     Report[]

  @@map("users")
}

// Orders for tracking payments
model Order {
  id              String      @id @default(cuid())
  userId          String?
  email           String      // For guest checkouts
  stripeSessionId String?     @unique
  stripePaymentId String?     @unique
  amount          Int         // Amount in cents
  currency        String      @default("AUD")
  status          OrderStatus @default(PENDING)
  reportType      ReportType
  vehicleIdentifier String    // VIN or Rego
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  user            User?       @relation(fields: [userId], references: [id])
  reports         Report[]

  @@map("orders")
}

// Vehicle reports
model Report {
  id              String       @id @default(cuid())
  orderId         String
  userId          String?
  vehicleVin      String?
  vehicleRego     String?
  vehicleState    String?
  reportType      ReportType
  status          ReportStatus @default(GENERATING)
  generatedAt     DateTime?
  expiresAt       DateTime?    // For 90-day monitoring

  // PPSR Data
  ppsrData        Json?
  ppsrCertificate String?      // PDF/Document reference

  // NEVDIS Data
  nevdisData      Json?
  isWrittenOff    Boolean?
  isStolen        Boolean?
  writeOffDetails Json?

  // Pricing Data
  marketValue     Json?
  priceAnalysis   Json?

  // Visual/Damage Data
  damageReport    Json?
  visualDamageMap String?      // Image reference

  // Metadata
  dataSourceIds   Json?        // Track which APIs provided data
  lastChecked     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  order           Order        @relation(fields: [orderId], references: [id])
  user            User?        @relation(fields: [userId], references: [id])
  monitoringLogs  MonitoringLog[]

  @@map("reports")
}

// Continuous monitoring for premium reports
model MonitoringLog {
  id         String   @id @default(cuid())
  reportId   String
  checkType  String   // "ppsr", "nevdis", "pricing"
  oldValue   Json?
  newValue   Json?
  hasChange  Boolean  @default(false)
  notified   Boolean  @default(false)
  checkedAt  DateTime @default(now())

  // Relations
  report     Report   @relation(fields: [reportId], references: [id])

  @@map("monitoring_logs")
}

// Cache for API responses to reduce costs
model ApiCache {
  id          String   @id @default(cuid())
  cacheKey    String   @unique  // VIN/Rego + API type
  apiProvider String   // "ppsr", "nevdis", "redbook"
  response    Json
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  @@map("api_cache")
}

// System settings and API configurations
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String

  @@map("system_config")
}

// Enums
enum OrderStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum ReportStatus {
  GENERATING
  PENDING_MANUAL_REVIEW  // For manual PPSR processing
  COMPLETED
  FAILED
  EXPIRED
}

enum ReportType {
  BASIC      // $8 - PPSR + basic info
  STANDARD   // $15 - + visual damage + pricing
  PREMIUM    // $25 - + monitoring + full history
}
